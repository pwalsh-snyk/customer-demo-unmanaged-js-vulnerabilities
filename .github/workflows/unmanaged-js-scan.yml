name: 🔍 Scan for Unmanaged JavaScript Vulnerabilities

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allow manual triggering for demo

jobs:
  scan-unmanaged-js:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: 🔧 Install application dependencies
      run: npm install
      
    - name: 🛠️ Install Snyk Unmanaged JS Scanner
      run: |
        # For demo purposes - installing retire.js directly
        # In production, you would install: npm install -g snyk-unmanaged-js-scanner
        npm install -g retire
        
        # Create a simple wrapper script for the demo
        cat > /usr/local/bin/snyk-unmanaged-scanner << 'EOF'
        #!/bin/bash
        
        # Simple wrapper around retire.js for demo purposes
        # In production, this would be the full snyk-unmanaged-scanner tool
        
        SCAN_PATH="$1"
        OUTPUT_FORMAT=""
        OUTPUT_FILE=""
        SEVERITY=""
        IGNORE=""
        
        # Parse arguments (simplified for demo)
        while [[ $# -gt 0 ]]; do
          case $1 in
            --output)
              OUTPUT_FORMAT="$2"
              shift 2
              ;;
            --output-file)
              OUTPUT_FILE="$2"
              shift 2
              ;;
            --fail-on)
              SEVERITY="$2"
              shift 2
              ;;
            --ignore)
              IGNORE="$2"
              shift 2
              ;;
            --*)
              # Skip other options
              shift 2
              ;;
            *)
              if [ -z "$SCAN_PATH" ]; then
                SCAN_PATH="$1"
              fi
              shift
              ;;
          esac
        done
        
        echo "🔍 Snyk Unmanaged JavaScript Library Scanner (Demo Mode)"
        echo "Scanning: $SCAN_PATH"
        echo ""
        
        # Run retire.js scan
        RETIRE_ARGS="--path $SCAN_PATH --outputformat json"
        if [ -n "$IGNORE" ]; then
          RETIRE_ARGS="$RETIRE_ARGS --ignore $IGNORE"
        fi
        
        retire $RETIRE_ARGS > scan_results.json 2>/dev/null || true
        
        # Display results
        if [ -f "scan_results.json" ] && [ -s "scan_results.json" ]; then
          echo "📋 SCAN SUMMARY"
          echo "──────────────────────────────────────────────────"
          
          # Parse JSON results and display summary
          FILES=$(cat scan_results.json | jq -r '.data | length' 2>/dev/null || echo "0")
          VULNS=$(cat scan_results.json | jq -r '[.data[].results[]?.vulnerabilities[]?] | length' 2>/dev/null || echo "0")
          LIBS=$(cat scan_results.json | jq -r '[.data[].results[]?.component] | unique | length' 2>/dev/null || echo "0")
          
          echo "📁 Files scanned: $FILES"
          echo "🔍 Libraries detected: $LIBS" 
          echo "🚨 Total vulnerabilities: $VULNS"
          echo ""
          
          if [ "$VULNS" -gt 0 ]; then
            echo "🚨 VULNERABILITY DETAILS"
            echo "────────────────────────────────────────────────────────────────────────────────"
            cat scan_results.json | jq -r '
              .data[] | 
              select(.results | length > 0) |
              "📄 " + .file,
              (.results[] | 
                select(.vulnerabilities | length > 0) |
                "  📦 " + (.component // .npmname) + " v" + .version,
                (.vulnerabilities[] | 
                  "    [" + (.severity | ascii_upcase) + "] " + (.identifiers.summary // "Vulnerability found")
                )
              )
            ' 2>/dev/null || echo "Error parsing vulnerability details"
          fi
          
          # Save formatted output if requested
          if [ -n "$OUTPUT_FILE" ]; then
            cp scan_results.json "$OUTPUT_FILE"
            echo ""
            echo "💾 Results saved to: $OUTPUT_FILE"
          fi
          
          # Exit with error code if vulnerabilities found
          if [ "$VULNS" -gt 0 ]; then
            echo ""
            echo "❌ Found $VULNS vulnerabilities in unmanaged JavaScript libraries"
            exit 1
          fi
        else
          echo "✅ No vulnerabilities found or no JavaScript files detected"
        fi
        EOF
        
        chmod +x /usr/local/bin/snyk-unmanaged-scanner

    - name: 🔍 Scan for vulnerable unmanaged JavaScript libraries
      id: scan
      run: |
        echo "🎯 Scanning for unmanaged JavaScript vulnerabilities..."
        
        # Run the scanner with detailed output
        snyk-unmanaged-scanner . \
          --output both \
          --output-file unmanaged-vulnerabilities.json \
          --fail-on medium \
          --ignore node_modules,dist,build,.git \
          --extensions js,jsx,ts,tsx \
          --include-low-severity
      continue-on-error: true # Continue to show results even if vulnerabilities found

    - name: 📊 Display scan summary
      if: always()
      run: |
        echo "## 📋 Scan Results Summary" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "unmanaged-vulnerabilities.json" ]; then
          TOTAL_FILES=$(cat unmanaged-vulnerabilities.json | jq -r '.summary.totalFiles')
          VULNERABLE_FILES=$(cat unmanaged-vulnerabilities.json | jq -r '.summary.vulnerableFiles') 
          TOTAL_VULNS=$(cat unmanaged-vulnerabilities.json | jq -r '.summary.totalVulnerabilities')
          CRITICAL=$(cat unmanaged-vulnerabilities.json | jq -r '.summary.severityCounts.critical')
          HIGH=$(cat unmanaged-vulnerabilities.json | jq -r '.summary.severityCounts.high')
          MEDIUM=$(cat unmanaged-vulnerabilities.json | jq -r '.summary.severityCounts.medium')
          LOW=$(cat unmanaged-vulnerabilities.json | jq -r '.summary.severityCounts.low')
          
          echo "- **Files scanned:** $TOTAL_FILES" >> $GITHUB_STEP_SUMMARY
          echo "- **Vulnerable files:** $VULNERABLE_FILES" >> $GITHUB_STEP_SUMMARY  
          echo "- **Total vulnerabilities:** $TOTAL_VULNS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Severity Breakdown" >> $GITHUB_STEP_SUMMARY
          echo "- 🔴 **Critical:** $CRITICAL" >> $GITHUB_STEP_SUMMARY
          echo "- 🟠 **High:** $HIGH" >> $GITHUB_STEP_SUMMARY
          echo "- 🟡 **Medium:** $MEDIUM" >> $GITHUB_STEP_SUMMARY
          echo "- 🟢 **Low:** $LOW" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📚 Libraries Detected" >> $GITHUB_STEP_SUMMARY
          cat unmanaged-vulnerabilities.json | jq -r '.summary.librariesFound[]' | sed 's/^/- /' >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ No results file generated" >> $GITHUB_STEP_SUMMARY
        fi

    - name: 📤 Upload scan results as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unmanaged-js-scan-results
        path: |
          unmanaged-vulnerabilities.json
        retention-days: 30

    - name: 💬 Comment on PR with vulnerability details
      if: failure() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const results = JSON.parse(fs.readFileSync('unmanaged-vulnerabilities.json', 'utf8'));
            
            let comment = `## 🚨 Unmanaged JavaScript Vulnerabilities Detected
            
            The scanner found **${results.summary.totalVulnerabilities} vulnerabilities** in unmanaged JavaScript libraries that are not tracked in \`package.json\`.
            
            ### 📊 Summary
            - **Files scanned:** ${results.summary.totalFiles}
            - **Vulnerable files:** ${results.summary.vulnerableFiles}
            - **Total vulnerabilities:** ${results.summary.totalVulnerabilities}
            
            ### 🎯 Severity Breakdown
            | Severity | Count |
            |----------|--------|
            | 🔴 Critical | ${results.summary.severityCounts.critical} |
            | 🟠 High | ${results.summary.severityCounts.high} |
            | 🟡 Medium | ${results.summary.severityCounts.medium} |
            | 🟢 Low | ${results.summary.severityCounts.low} |
            
            ### 📚 Detected Libraries
            `;
            
            results.summary.librariesFound.forEach(lib => {
              comment += `- \`${lib}\`\n`;
            });
            
            comment += `
            ### ⚠️ Security Risk
            These libraries are embedded directly in your source code and are not managed by package managers. This makes them:
            - **Invisible to standard dependency scans**
            - **Difficult to track and update**
            - **Potential security vulnerabilities**
            
            ### 🔧 Recommended Actions
            1. **Review** the detected libraries and their vulnerabilities
            2. **Update** to secure versions where possible
            3. **Consider** migrating to package manager-based dependencies
            4. **Monitor** for new vulnerabilities in these libraries
            
            📥 **Download the full scan report** from the workflow artifacts for detailed vulnerability information.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
          } catch (error) {
            console.log('❌ Error processing scan results:', error.message);
            
            // Fallback comment
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ⚠️ Unmanaged JavaScript Vulnerability Scan
              
              The scanner detected potential security issues in unmanaged JavaScript libraries.
              
              Please check the workflow logs and artifacts for detailed results.`
            });
          }

    - name: 🚫 Fail build if high/critical vulnerabilities found
      if: always()
      run: |
        if [ -f "unmanaged-vulnerabilities.json" ]; then
          HIGH=$(cat unmanaged-vulnerabilities.json | jq -r '.summary.severityCounts.high')
          CRITICAL=$(cat unmanaged-vulnerabilities.json | jq -r '.summary.severityCounts.critical')
          
          if [ "$HIGH" -gt 0 ] || [ "$CRITICAL" -gt 0 ]; then
            echo "❌ Build failed due to high or critical severity vulnerabilities"
            echo "High: $HIGH, Critical: $CRITICAL"
            exit 1
          else
            echo "✅ No high or critical vulnerabilities found"
          fi
        fi
